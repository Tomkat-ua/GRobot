from googleapiclient.discovery import build
from google.oauth2 import service_account
from oauth2client.service_account import ServiceAccountCredentials
import io
from googleapiclient.http import MediaIoBaseDownload


SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
creds = service_account.Credentials.from_service_account_file(
    'credentials.json', scopes=SCOPES)
drive_service = build('drive', 'v3', credentials=creds)

# SCOPES = ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets','https://www.googleapis.com/auth/drive.readonly']
# creds = ServiceAccountCredentials.from_json_keyfile_name("creds/credentials.json", SCOPES)
#
# gc = gspread.authorize(creds)
# drive = build('drive', 'v3', credentials=creds)

def ie(file_id):
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    # SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
    # creds = service_account.Credentials.from_service_account_file(
    #     'credentials.json', scopes=SCOPES)
    # drive_service = build('drive', 'v3', credentials=creds)

    # ID Google Sheet —Ñ–∞–π–ª—É (–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è)
    # file_id = '1dUieMDyXKqKM8ijBqeTlq9lJv6ScmWM8t2_ht7NJeWE'

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel
    request = drive_service.files().export_media(fileId=file_id,
        mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')


    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, —è–∫—â–æ —á–∏—Ç–∞—î—à –Ω–∞–ø—Ä—è–º—É –∑ BytesIO)
    with open("exported_sheet.xlsx", "wb") as f:
        f.write(fh.getbuffer())


# === –ó–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª .xlsx –Ω–∞ Google Drive ===
def find_file_id(file_name):

    query = f"name = '{file_name}' and mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
    results = drive.files().list(q=query, fields="files(id, name)").execute()
    files = results.get('files', [])
    if not files:
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Google –î–∏—Å–∫—É.")
    return files[0]['id']

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ Google Sheets ===
def convert_to_gsheet(xlsx_file_id, new_title):
    body = {'name': new_title, 'mimeType': 'application/vnd.google-apps.spreadsheet'}
    converted = drive.files().copy(fileId=xlsx_file_id, body=body).execute()
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ —É Google Sheets: {converted['id']}")
    return converted['id']

# === –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è sync_status —É –∫–æ–ª–æ–Ω—Ü—ñ E ===
def batch_update_sync_status(sheet_id, column_letter='E'):
    sheet = gc.open_by_key(sheet_id).sheet1
    records = sheet.get_all_records()
    row_count = len(records)
    print(f"üîç –û–±—Ä–æ–±–∫–∞ {row_count} —Ä—è–¥–∫—ñ–≤...")

    cell_range = f'{column_letter}2:{column_letter}{row_count+1}'
    cells = sheet.range(cell_range)

    for i, cell in enumerate(cells):
        value = str(records[i].get('sync_status', '')).strip().lower()
        if value != '–æ–∫':
            cell.value = "–æ–∫"

    sheet.update_cells(cells)
    print("‚úÖ –°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –∫–≤–æ—Ç–∏.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    try:
        xlsx_filename = "–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ_1–Ñ–ë.xlsx"
        sheet_title = "–û–±—Ä–æ–±–ª–µ–Ω–∏–π"
        xlsx_id = find_file_id(xlsx_filename)
        print(xlsx_id)
        ie(xlsx_id)
        # sheet_id = convert_to_gsheet(xlsx_id, sheet_title)
        # print(sheet_id)
        # batch_update_sync_status(sheet_id)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞:", e)
